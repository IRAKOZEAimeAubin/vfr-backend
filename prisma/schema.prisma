// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  username  String   @unique
  role      String?  @default("USER")
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Member {
  id            String    @id @default(uuid())
  regNumber     String    @unique
  name          String
  phone         String    @unique
  department    String
  monthlyPledge Float
  totalPledge   Float     @default(0)
  active        Boolean
  savings       Savings[]
  loans         Loan[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model LoanType {
  id           String   @id @default(uuid())
  loanId       String   @unique
  typeName     String   @unique
  interestRate Float
  loans        Loan[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Loan {
  id           String    @id @default(uuid())
  principal    Float
  installments Int
  interest     Float?    @default(0)
  amount       Float?    @default(0)
  reason       String
  member       Member?   @relation(fields: [memberId], references: [id])
  memberId     String?
  loanType     LoanType? @relation(fields: [loanTypeId], references: [id])
  loanTypeId   String?
  approved     Boolean?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Savings {
  id              String   @id @default(uuid())
  previousSavings Float
  currentSavings  Float
  member          Member?  @relation(fields: [memberId], references: [id])
  memberId        String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model TotalSavings {
  id        String   @id @default(uuid())
  amount    Float
  comment   String
  approved  Boolean?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
