// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String         @id @default(uuid())
  name                 String
  username             String         @unique
  role                 String?        @default("USER")
  password             String
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  createdLoanTypes     LoanType[]
  createdMembers       Member[]
  createdTotalSavings  TotalSavings[] @relation("Total Savings Approval")
  approvedTotalSavings TotalSavings[] @relation("Total Savings Creation")
  createdLoans         Loan[]         @relation("Loan Creation")
  approvedLoans        Loan[]         @relation("Loan Approval")
}

model Member {
  regNumber     String    @id
  name          String
  phone         String    @unique
  department    String
  monthlyPledge Float
  totalPledge   Float     @default(0)
  active        Boolean
  savings       Savings[]
  loans         Loan[]
  createdBy     User?     @relation(fields: [creatorId], references: [id])
  creatorId     String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model LoanType {
  loanId       String   @id
  typeName     String   @unique
  interestRate Float
  loans        Loan[]
  createdBy    User?    @relation(fields: [creatorId], references: [id])
  creatorId    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Loan {
  id                String    @id @default(uuid())
  principal         Float
  installments      Int
  interest          Float?    @default(0)
  amount            Float?    @default(0)
  reason            String
  member            Member?   @relation(fields: [memberId], references: [regNumber])
  memberId          String?
  loanType          LoanType? @relation(fields: [loanTypeId], references: [loanId])
  loanTypeId        String?
  approved          Boolean?
  createdBy         User?     @relation(fields: [creatorId], references: [id], name: "Loan Creation")
  creatorId         String?
  approvedBy        User?     @relation(fields: [approvalOfficerId], references: [id], name: "Loan Approval")
  approvalOfficerId String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Savings {
  id              String   @id @default(uuid())
  previousSavings Float
  currentSavings  Float
  member          Member?  @relation(fields: [memberId], references: [regNumber])
  memberId        String?
  comment         String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model TotalSavings {
  id                String   @id @default(uuid())
  amount            Float
  comment           String
  approved          Boolean?
  createdBy         User?    @relation(fields: [creatorId], references: [id], name: "Total Savings Creation")
  creatorId         String?
  approvedBy        User?    @relation(fields: [approvalOfficerId], references: [id], name: "Total Savings Approval")
  approvalOfficerId String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}
